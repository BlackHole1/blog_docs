"use strict";(self.webpackChunkwixweb=self.webpackChunkwixweb||[]).push([[19668],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},f="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=l(n),p=o,d=f["".concat(s,".").concat(p)]||f[p]||m[p]||i;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[f]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},31491:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>l,toc:()=>f});n(67294);var r=n(3905);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const c={title:"Performance Counter Custom Action",layout:"documentation",after:"using_standard_customactions"},s="Performance Counter Custom Action",l={unversionedId:"customactions/perfmon",id:"version-v3/customactions/perfmon",title:"Performance Counter Custom Action",description:"The PerfCounter element (part of WiXUtilExtension) allows you to register your performance counters with the Windows API. There are several pieces that all work together to successfully register:",source:"@site/versioned_docs/version-v3/customactions/perfmon.md",sourceDirName:"customactions",slug:"/customactions/perfmon",permalink:"/wixtoolset/docs/v3/customactions/perfmon",draft:!1,editUrl:"https://github.com/wixtoolset/web/tree/master/src/Docusaurus/versioned_docs/version-v3/customactions/perfmon.md",tags:[],version:"v3",frontMatter:{title:"Performance Counter Custom Action",layout:"documentation",after:"using_standard_customactions"}},u={},f=[{value:"Sample WIX source fragment and PerfCounter.ini",id:"sample-wix-source-fragment-and-perfcounterini",level:2}],m={toc:f},p="wrapper";function d(e){var{components:t}=e,n=a(e,["components"]);return(0,r.kt)(p,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"performance-counter-custom-action"},"Performance Counter Custom Action"),(0,r.kt)("p",null,"The PerfCounter element (part of WiXUtilExtension) allows you to register your performance counters with the Windows API. There are several pieces that all work together to successfully register:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Your performance DLL - The DLL must export Open, Collect, and Close methods. See MSDN for more detail."),(0,r.kt)("li",{parentName:"ul"},"Performance registry values - The registry must contain keys pointing to your DLL and its Open, Collect, and Close methods. These are created using the Registry element."),(0,r.kt)("li",{parentName:"ul"},"Perfmon INI and H text files - These contain the text descriptions to display in the UI. See MSDN for lodctr documentation. ",(0,r.kt)("a",{href:"http://msdn.microsoft.com/library/aa371878.aspx",target:"_blank"},"This MSDN documentation")," is a good place to start. See below for samples re-purposed from MSDN."),(0,r.kt)("li",{parentName:"ul"},"The RegisterPerfmon custom action - You can link with the WiXUtilExtension.dll to ensure that the custom actions are included in your final MSI. See ",(0,r.kt)("a",{parentName:"li",href:"/wixtoolset/docs/v3/customactions/using_standard_customactions"},"Using Standard Custom Actions"),". The custom action calls (Un)LoadPerfCounterTextStrings to register your counters with Windows","\ufffd"," Perfmon API. To invoke the custom action, you create a PerfCounter element nested within the File element for the Perfmon.INI file. The PerfCounter element contains a single attribute: Name. The Name attribute should match the name in the Registry and in the .INI file. See below for sample WIX usage of the ","<","PerfCounter",">"," element.")),(0,r.kt)("h2",{id:"sample-wix-source-fragment-and-perfcounterini"},"Sample WIX source fragment and PerfCounter.ini"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">\n<Fragment>\n  <DirectoryRef Id="BinDir">\n    <Component Id="SharedNative" DiskId="1">\n\n      <Registry Id="Shared_r1" Root="HKLM" Key="SYSTEM\\CurrentControlSet\\Services\\MyApplication\\Performance" Name="Open" Value="OpenPerformanceData" Type="string" />\n      <Registry Id="Shared_r2" Root="HKLM" Key="SYSTEM\\CurrentControlSet\\Services\\MyApplication\\Performance" Name="Collect" Value="CollectPerformanceData" Type="string" />\n      <Registry Id="Shared_r3" Root="HKLM" Key="SYSTEM\\CurrentControlSet\\Services\\MyApplication\\Performance" Name="Close" Value="ClosePerformanceData" Type="string" />\n      <Registry Id="Shared_r4" Root="HKLM" Key="SYSTEM\\CurrentControlSet\\Services\\MyApplication\\Performance" Name="Library" Value="[!PERFDLL.DLL]" Type="string" />\n\n     <File Id="PERFDLL.DLL" Name="MyPerfDll.dll" Source="x86\\debug\\0\\myperfdll.dll" />\n\n     <File Id="PERFCOUNTERS.H" Name="PerfCounters.h" Source="x86\\debug\\0\\perfcounters.h" />\n     <File Id="PERFCOUNTERS.INI" Name="PerfCounters.ini" Source="x86\\debug\\0\\perfcounters.ini" >\n        <PerfCounter Name="MyApplication" />\n     </File>\n\n    </Component>\n  </DirectoryRef>\n</Fragment>\n</Wix>\n')),(0,r.kt)("p",null,"Sample PerfCounters.ini:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[info]\ndrivername=MyApplication\nsymbolfile=PerfCounters.h\n\n[languages] \n009=English\n004=Chinese\n\n[objects]\nPERF_OBJECT_1_009_NAME=Performance object name\nPERF_OBJECT_1_004_NAME=Performance object name in Chinese\n\n[text]\nOBJECT_1_009_NAME=Name of the device\nOBJECT_1_009_HELP=Displays performance statistics of the device\nOBJECT_1_004_NAME=Name of the device in Chinese\nOBJECT_1_004_HELP=Displays performance statistics of the device in Chinese\n\nDEVICE_COUNTER_1_009_NAME=Name of first counter\nDEVICE_COUNTER_1_009_HELP=Displays the current value of the first counter\nDEVICE_COUNTER_1_004_NAME=Name of the first counter in Chinese\nDEVICE_COUNTER_1_004_HELP=Displays the value of the first counter in Chinese\n\nDEVICE_COUNTER_2_009_NAME=Name of the second counter\nDEVICE_COUNTER_2_009_HELP=Displays the current rate of the second counter\nDEVICE_COUNTER_2_004_NAME=Name of the second counter in Chinese\nDEVICE_COUNTER_2_004_HELP=Displays the rate of the second counter in Chinese\n\nPERF_OBJECT_1_009_NAME=Name of the third counter\nPERF_OBJECT_1_009_HELP=Displays the current rate of the third counter\nPERF_OBJECT_1_004_NAME=Name of the third counter in Chinese\nPERF_OBJECT_1_004_HELP=Displays the rate of the third counter in Chinese\n")),(0,r.kt)("p",null,"Sample PerfCounters.h:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#define OBJECT_1    0\n#define DEVICE_COUNTER_1    2\n#define DEVICE_COUNTER_2    4\n#define PERF_OBJECT_1    8\n")))}d.isMDXComponent=!0}}]);