"use strict";(self.webpackChunkwixweb=self.webpackChunkwixweb||[]).push([[20014],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(r),d=n,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return r?a.createElement(h,l(l({ref:t},c),{},{components:r})):a.createElement(h,l({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:n,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},30851:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>m});r(67294);var a=r(3905);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}const o={custom_edit_url:null,toc_max_heading_level:2},p="ZipEngine Class",s={unversionedId:"api/wixtoolset.dtf.compression.zip/zipengine",id:"api/wixtoolset.dtf.compression.zip/zipengine",title:"ZipEngine Class",description:"Engine capable of packing and unpacking archives in the zip format.",source:"@site/docs/api/wixtoolset.dtf.compression.zip/zipengine.md",sourceDirName:"api/wixtoolset.dtf.compression.zip",slug:"/api/wixtoolset.dtf.compression.zip/zipengine",permalink:"/wixtoolset/docs/api/wixtoolset.dtf.compression.zip/zipengine",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{custom_edit_url:null,toc_max_heading_level:2},sidebar:"docsSidebar",previous:{title:"ZipCompressionMethod Enumeration",permalink:"/wixtoolset/docs/api/wixtoolset.dtf.compression.zip/zipcompressionmethod"},next:{title:"ZipException Class",permalink:"/wixtoolset/docs/api/wixtoolset.dtf.compression.zip/zipexception"}},c={},m=[{value:"Methods",id:"methods",level:2},{value:"Properties",id:"properties",level:2},{value:"FindArchiveOffset(stream) Method",id:"findarchiveoffset_stream",level:2},{value:"Declaration",id:"declaration",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"Remarks",id:"remarks",level:3},{value:"IsArchive(stream) Method",id:"isarchive_stream",level:2},{value:"Declaration",id:"declaration-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Return value",id:"return-value-1",level:3},{value:"ArchiveComment Property",id:"archivecomment",level:2},{value:"Declaration",id:"declaration-2",level:3}],u={toc:m},d="wrapper";function h(e){var{components:t}=e,r=l(e,["components"]);return(0,a.kt)(d,i(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},a=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),a.forEach((function(t){n(e,t,r[t])}))}return e}({},u,r),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"zipengine-class"},"ZipEngine Class"),(0,a.kt)("p",null,"Engine capable of packing and unpacking archives in the zip format."),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#findarchiveoffset_stream"},"FindArchiveOffset(stream)")),(0,a.kt)("td",{parentName:"tr",align:null},"Gets the offset of an archive that is positioned 0 or more bytes from the start of the Stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#isarchive_stream"},"IsArchive(stream)")),(0,a.kt)("td",{parentName:"tr",align:null},"Checks whether a Stream begins with a header that indicates it is a valid archive file.")))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#archivecomment"},"ArchiveComment")),(0,a.kt)("td",{parentName:"tr",align:null},"Gets the comment from the last-examined archive, or sets the comment to be added to any created archives.")))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"WixToolset.Dtf.Compression.Zip.dll")," version ",(0,a.kt)("inlineCode",{parentName:"p"},"5.0.0+41e11442b2ca93e444b60213b5ae99dcbab787d8")),(0,a.kt)("h2",{id:"findarchiveoffset_stream"},"FindArchiveOffset(stream) Method"),(0,a.kt)("p",null,"Gets the offset of an archive that is positioned 0 or more bytes from the start of the Stream."),(0,a.kt)("h3",{id:"declaration"},"Declaration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public System.Int64 FindArchiveOffset(\n  System.IO.Stream stream\n)\n")),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"stream"),(0,a.kt)("td",{parentName:"tr",align:null},"System.IO.Stream"),(0,a.kt)("td",{parentName:"tr",align:null},"A stream for reading the archive.")))),(0,a.kt)("h3",{id:"return-value"},"Return value"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"System.Int64")," The offset in bytes of the archive, or -1 if no archive is found in the Stream."),(0,a.kt)("h3",{id:"remarks"},"Remarks"),(0,a.kt)("p",null,"The archive must begin on a 4-byte boundary."),(0,a.kt)("h2",{id:"isarchive_stream"},"IsArchive(stream) Method"),(0,a.kt)("p",null,"Checks whether a Stream begins with a header that indicates it is a valid archive file."),(0,a.kt)("h3",{id:"declaration-1"},"Declaration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public bool IsArchive(\n  System.IO.Stream stream\n)\n")),(0,a.kt)("h3",{id:"parameters-1"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"stream"),(0,a.kt)("td",{parentName:"tr",align:null},"System.IO.Stream"),(0,a.kt)("td",{parentName:"tr",align:null},"Stream for reading the archive file.")))),(0,a.kt)("h3",{id:"return-value-1"},"Return value"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"bool")," True if the stream is a valid zip archive (with no offset); false otherwise."),(0,a.kt)("h2",{id:"archivecomment"},"ArchiveComment Property"),(0,a.kt)("p",null,"Gets the comment from the last-examined archive, or sets the comment to be added to any created archives."),(0,a.kt)("h3",{id:"declaration-2"},"Declaration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public string ArchiveComment { get; set; } \n")))}h.isMDXComponent=!0}}]);